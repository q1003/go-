RPC（Remote Procedure Call），即远程过程调用。它允许像调用本地服务一样调用远程服务。
RPC是一种服务器-客户端（Client/Server）模式，经典实现是一个通过发送请求-接受回应进行信息交互的系统。

本地调用：
package main
import "fmt"
func add(x, y int)int{
	return x + y
}
func main(){
	// 调用本地函数add
	a := 10
	b := 20
	ret := add(x, y)
	fmt.Println(ret)
}

RPC调用
本地过程调用发生在同一进程中——定义add函数的代码和调用add函数的代码共享同一个内存空间，所以调用能够正常执行。
但是我们无法直接在另一个程序——app2中调用add函数，因为它们是两个程序——内存空间是相互隔离的。（app1和app2可能部署在同一台服务器上也可能部署在互联网的不同服务器上。）
RPC就是为了解决类似远程、跨内存空间、的函数/方法调用的。要实现RPC就需要解决以下三个问题：

如何确定要执行的函数？ 在本地调用中，函数主体通过函数指针函数指定，然后调用 add 函数，编译器通过函数指针函数自动确定 add 函数在内存中的位置。但是在 RPC 中，调用不能通过函数指针完成，因为它们的内存地址可能完全不同。因此，调用方和被调用方都需要维护一个{ function <-> ID }映射表，以确保调用正确的函数。
如何表达参数？ 本地过程调用中传递的参数是通过堆栈内存结构实现的，但 RPC 不能直接使用内存传递参数，因此参数或返回值需要在传输期间序列化并转换成字节流，反之亦然。
如何进行网络传输？ 函数的调用方和被调用方通常是通过网络连接的，也就是说，function ID 和序列化字节流需要通过网络传输，因此，只要能够完成传输，调用方和被调用方就不受某个网络协议的限制。.例如，一些 RPC 框架使用 TCP 协议，一些使用 HTTP。
以往实现跨服务调用的时候，我们会采用RESTful API的方式，被调用方会对外提供一个HTTP接口，调用方按要求发起HTTP请求并接收API接口返回的响应数据。下面的示例是将add函数包装成一个RESTful API。
例子：
server层
package main

import (
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"
)

type addParam struct {
	X int `json:"x"`
	Y int `json:"y"`
}

type addResult struct {
	Code int `json:"code"`
	Data int `json:"data"`
}

func add(x, y int) int {
	return x + y
}

func addHandler(w http.ResponseWriter, r *http.Request) {
	//解析参数
	b, _ := ioutil.ReadAll(r.Body) //ReadAll函数的作用是从给定的可读取数据流中读取全部内容，并将其作为字节切片（[]byte）返回。在这里，它读取了HTTP响应的全部内容。
	var param addParam
	json.Unmarshal(b, &param)
	//业务逻辑
	ret := add(param.X, param.Y)
	//返回响应
	respBytes, _ := json.Marshal(addResult{Code: 0, Data: ret})
	w.Write(respBytes)
}

func main() {
	http.HandleFunc("/add", addHandler)
	log.Fatal(http.ListenAndServe(":9090", nil))
}

client层
package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

type addParam struct {
	X int `json:"x"`
	Y int `json:"y"`
}

type addResult struct {
	Code int `json:"code"`
	Data int `json:"data"`
}

func main() {
	//通过HTTP请求调用其他服务器上的add服务
	url := "http://localhost:9090/add"
	param := addParam{
		X: 10,
		Y: 20,
	}
	paramBytes, _ := json.Marshal(param)
	resp, _ := http.Post(url, "application/json", bytes.NewReader(paramBytes))
	defer resp.Body.Close()

	respBytes, _ := ioutil.ReadAll(resp.Body)
	var respData addResult
	json.Unmarshal(respBytes, &respData)
	fmt.Println(respData)
}

这种模式是我们目前比较常见的跨服务或跨语言之间基于RESTful API的服务调用模式。 既然使用API调用也能实现类似远程调用的目的，为什么还要用RPC呢？
使用 RPC 的目的是让我们调用远程方法像调用本地方法一样无差别。并且基于RESTful API通常是基于HTTP协议，传输数据采用JSON等文本协议，相较于RPC 直接使用TCP协议，传输数据多采用二进制协议来说，RPC通常相比RESTful API性能会更好。
RESTful API多用于前后端之间的数据传输，而目前微服务架构下各个微服务之间多采用RPC调用。


基础RPC示例
Go语言的 rpc 包提供对通过网络或其他 i/o 连接导出的对象方法的访问，服务器注册一个对象，并把它作为服务对外可见（服务名称就是类型名称）。注册后，对象的导出方法将支持远程访问。
服务器可以注册不同类型的多个对象(服务) ，但是不支持注册同一类型的多个对象。
代码示例：
serve层：
package main

import (
	"log"
	"net"
	"net/http"
	"net/rpc"
)

type Args struct {
	X, Y int
}

// 自定义一个结构体
type ServiceA struct{}

// Add 为ServiceA类型增加一个可导出的Add方法
func (s *ServiceA) Add(args *Args, reply *int) error {
	*reply = args.X + args.Y
	return nil
}

func main() {
	service := new(ServiceA)
	rpc.Register(service) //注册RPC服务
	//rpc.HandleHTTP() 函数注册了一个 HTTP 处理器，用于处理 RPC 请求。然后使用 net.Listen 函数监听在
	//tcp 协议下的 9091 端口。最后调用 http.Serve 函数开始接受和处理 HTTP 请求。
	rpc.HandleHTTP() //基于HTTP协议  rpc.HandleHTTP() //基于HTTP协议http.Serve(l, nil)
	l, err := net.Listen("tcp", ":9091")
	if err != nil {
		log.Fatal("listen error:", err)
	}
	http.Serve(l, nil)
}

client层：
package main

import (
	"fmt"
	"log"
	"net/rpc"
)

type Args struct {
	X, Y int
}

func main() {
	//建立HTTP连接
	client, err := rpc.DialHTTP("tcp", "localhost:9091") //rpc.DialHTTP 函数建立到RPC服务的连接。
	if err != nil {
		log.Fatal("dialing:", err)
	}

	//同步调用
	args := &Args{10, 20}
	var reply int
	err = client.Call("ServiceA.Add", args, &reply) //rpc.DialHTTP 函数建立到RPC服务的连接。
	if err != nil {
		log.Fatal("ServiceA.Add error:", err)
	}
	fmt.Printf("ServiceA.Add: %d+%d=%d\n", args.X, args.Y, reply)

	//异步调用
	var reply2 int
	//使用 client.Go 方法进行异步RPC方法调用，与同步调用不同的是，这里不会阻塞程序执行，而是立即返回一个 rpc.Call 结构体的指针
	divCall := client.Go("ServiceA.Add", args, &reply2, nil)
	replyCall := <-divCall.Done //接受调用结果
	fmt.Println(replyCall.Error)
	fmt.Println(reply2)
}

基于TCP协议的RPC
在server层把
rpc.HandleHTTP() //基于HTTP协议
http.Serve(l, nil)这两行代码去掉
换成
//用于接受客户端的连接。l.Accept() 方法会阻塞程序的执行，直到有新的连接进入。一旦有新的连接，Accept() 方法会返回一个新的 net.Conn 对象 conn，代表了与客户端的连接。
for {
		conn, _ := l.Accept()
		rpc.ServeConn(conn)
	}

在client层把
client, err := rpc.DialHTTP("tcp", "localhost:9091") //rpc.DialHTTP 函数建立到RPC服务的连接。
这行代码去掉
换成
//rpc.Dial 是一个函数，用于建立到 RPC 服务的连接。它接受两个参数：第一个参数是协议类型，这里是 "tcp"，表示使用 TCP 协议进行通信；
//第二个参数是服务的地址，这里是 "localhost:9091"，表示 RPC 服务所在的主机地址和端口号。
client, err := rpc.Dial("tcp", "localhost:9091")


基于json协议的RPC
rpc 包默认使用的是 gob 协议对传输数据进行序列化/反序列化，比较有局限性。
server端：
package main

import (
	"log"
	"net"

	//"net/http"
	"net/rpc"
	"net/rpc/jsonrpc"
)

type Args struct {
	X, Y int
}

// 自定义一个结构体
type ServiceA struct{}

// Add 为ServiceA类型增加一个可导出的Add方法
func (s *ServiceA) Add(args *Args, reply *int) error {
	*reply = args.X + args.Y
	return nil
}

func main() {
	service := new(ServiceA)
	rpc.Register(service) //注册RPC服务
	l, err := net.Listen("tcp", ":9091")
	if err != nil {
		log.Fatal("listen error:", err)
	}
	for {
		conn, _ := l.Accept()
		//使用JSON协议
    //rpc.ServeCodec 是一个函数，用于在指定的连接上为客户端提供 RPC 服务。
    //jsonrpc.NewServerCodec(conn) 创建了一个 JSON-RPC 编解码器，并将其与给定的连接 conn 关联起来。这个编解码器会将 RPC 请求和响应转换为 JSON 格式进行传输。
		rpc.ServeCodec(jsonrpc.NewServerCodec(conn))
	}
}

client端：
package main

import (
	"fmt"
	"log"
	"net"
	"net/rpc"
	"net/rpc/jsonrpc"
)

type Args struct {
	X, Y int
}

func main() {
	conn, err := net.Dial("tcp", "localhost:9091")
	//使用json协议
  //rpc.NewClientWithCodec 是一个函数，用于创建一个新的 RPC 客户端对象，并使用指定的编解码器进行通信。
  //jsonrpc.NewClientCodec(conn) 创建了一个 JSON-RPC 编解码器，并将其与给定的连接 conn 关联起来。这个编解码器会将 RPC 请求和响应转换为 JSON 格式进行传输。
	client := rpc.NewClientWithCodec(jsonrpc.NewClientCodec(conn))
	if err != nil {
		log.Fatal("dialing:", err)
	}

	//同步调用
	args := &Args{10, 20}
	var reply int
	err = client.Call("ServiceA.Add", args, &reply) //rpc.DialHTTP 函数建立到RPC服务的连接。
	if err != nil {
		log.Fatal("ServiceA.Add error:", err)
	}
	fmt.Printf("ServiceA.Add: %d+%d=%d\n", args.X, args.Y, reply)

	//异步调用
	var reply2 int
	//使用 client.Go 方法进行异步RPC方法调用，与同步调用不同的是，这里不会阻塞程序执行，而是立即返回一个 rpc.Call 结构体的指针
	divCall := client.Go("ServiceA.Add", args, &reply2, nil)
	replyCall := <-divCall.Done //接受调用结果
	fmt.Println(replyCall.Error)
	fmt.Println(reply2)
}


RPC原理：
1.服务调用方（client）以本地调用方式调用服务；
2.client stub接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体；
3.client stub找到服务地址，并将消息发送到服务端；
4.server 端接收到消息；
5.server stub收到消息后进行解码；
6.server stub根据解码结果调用本地的服务；
7.本地服务执行并将结果返回给server stub；
8.server stub将返回结果打包成能够进行网络传输的消息体；
9.按地址将消息发送至调用方；
10.client 端接收到消息；
11.client stub收到消息并进行解码；
12.调用方得到最终结果。
13.使用RPC框架的目标是只需要关心第1步和最后1步，中间的其他步骤统统封装起来，让使用者无需关心。例如社区中各式RPC框架（grpc、thrift等）就是为了让RPC调用更方便。
