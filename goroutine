进程：就是程序员在操作系统中的一次执行过程，是系统进行资源分配和调度的基本单位
线程：就是进程的一个执行实例，是程序执行的最小单元，它是比进程更小的能独立运行的基本单元

一个进程可以创建销毁多个线程，同一个进程中的多个线程可以并发执行
一个程序至少有一个进程，一个进程至少有一个线程

并发：多线程程序在单核上运行
并行：多线程程序在多核上运行

go主线程（可以直接成为线程，也可以理解为进程）：一个Go线程上，可以起多个协程，可以理解为协程是轻量级的线程
go协程的特点：
1.有独立的栈空间
2.共享程序堆空间
3.调度由用户控制
4.协程是轻量级的线程

主线程是一个物理线程，直接作用在cpu上的。是重量级的，非常耗费cpu资源。
协程是从主线程开启的，是轻量的线程是逻辑态。对资源消耗相对小
Golang的协程机制是重要的特点，可以轻松的开启上万个协程。其它编程语言的并发机制是一般基于线程的，开启过多的线程，资源耗费大，这里就突显Goalng在并发上的优势

例子：在主线程中开启一个goroutine，该协程每隔一秒输出"hello,world";在主线程中也每隔一秒输出"hello,golang"，输出10次后，退出程序
代码实现：
package main
import (
	"fmt"
	"strconv"
	"time"
)

func test() {
	for i := 1; i <= 10; i++ {
		fmt.Println("test() hello,world" + strconv.Itoa(i))
		time.Sleep(time.Second)
	}
}

func main() {
	go test() //开启一个协程
	for i := 1; i <= 10; i++ {
		fmt.Println("main() hello,golang" + strconv.Itoa(i))
		time.Sleep(time.Second)
	}
}

MPG模式基本介绍
1.M：操作系统的主线程（是物理线程）
2.p：协程执行需要的上下文
3.G：协程

设置Golang运行的cpu数
package main

import(
	"fmt"
	"runtime"
)

	func main(){
	//获取当前系统cpu的数量
	num:=runtime.NumCPU()
	//设置num-1的cpu运行go程序
	runtime.GOMAXPROCS(num)
	fmt.Println("num=",num)
}//go1.8以后，默认让程序运行在多个核上，可以不用设置

并行导致的资源竞争问题
解决方法一：使用全局变量加锁同步//适用于低水平的协程
	例子：使用协程解决阶乘问题
	代码实现：
	package main

import (
	"fmt"
	"sync"
	"time"
)

var (
	myMap = make(map[int]int, 10)
	lock  sync.Mutex
)

func test(n int) {
	res := 1
	for i := 1; i <= n; i++ {
		res *= i
	}
	//加锁
	lock.Lock()
	myMap[n] = res
	//解锁
	lock.Unlock()
}

func main() {
	for i := 1; i <= 10; i++ {
		go test(i)
	}

	time.Sleep(time.Second * 10)
	lock.Lock()
	for i, v := range myMap {
		fmt.Printf("map[%v]=%v\n", i, v)
	}
	lock.Unlock()
}

	
解决方法二：管道//适用于高水平的协程
