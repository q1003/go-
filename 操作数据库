操作数据库
	Go 语言中的 database/sql 包定义了对数据库的一系列操作。database/sql/driver
包定义了应被数据库驱动实现的接口，这些接口会被 sql 包使用。但是 Go 语言没有提供任何官
方的数据库驱动，所以我们需要导入第三方的数据库驱动。不过我们连接数据库之后对数据库操作
的大部分代码都使用 sql 包。
	获取数据库的连接
	代码演示
	创建一个 db.go 文件，导入 database/sql 包以及第三方驱动包

package utils
import (
	"database/sql"

	_ "github.com/go-sql-driver/mysql"
)
var (
	Db  *sql.DB
	err error
)

func init() {
	Db, err = sql.Open("mysql", "root:****@/work")//填入数据库用户密码，如果要
	     //连接其他还需要加上中括号里面的[tcp(localhost:3306)]，work表示数据库名
	if err != nil {
		panic(err.Error())
	}
}

open方法：func Open(driverName, dataSourceName string) (*DB, error)
说明：Open打开一个dirverName指定的数据库，dataSourceName指定数据源，一般包至少括数据库文件名和（可能的）连接信息。
大多数用户会通过数据库特定的连接帮助函数打开数据库，返回一个*DB。Go标准库中没有数据库驱动。
Open函数可能只是验证其参数，而不创建与数据库的连接。如果要检查数据源的名称是否合法，应调用返回值的Ping方法。
ping方法：func (db *DB) Ping() error
说明：Ping检查与数据库的连接是否仍有效，如果需要会创建连接。返回的DB可以安全的被多个go程同时使用，
并会维护自身的闲置连接池。这样一来，Open函数只需调用一次。很少需要关闭DB。

增删改操作
prepare方法：func (db *DB) Prepare(query string) (*Stmt, error)
说明：Prepare创建一个准备好的状态用于之后的查询和命令。返回值可以同时执行多个查询和命令。

stmt结构体说明：
Stmt是准备好的状态。Stmt可以安全的被多个go程同时使用。与以下三个方法进行绑定。

Exec方法：func (s *Stmt) Exec(args ...interface{}) (Result, error)
Exec使用提供的参数执行准备好的命令状态，返回Result类型的该状态执行结果的总结。

Query方法：func (s *Stmt) Query(args ...interface{}) (*Rows, error)
Query使用提供的参数执行准备好的查询状态，返回Rows类型查询结果。

QueryRow方法：func (s *Stmt) QueryRow(args ...interface{}) *Row
QueryRow使用提供的参数执行准备好的查询状态。如果在执行时遇到了错误，该错误会被延迟，
直到返回值的Scan方法被调用时才释放。返回值总是非nil的。如果没有查询到结果，*Row类型
返回值的Scan方法会返回ErrNoRows；否则，Scan方法会扫描结果第一行并丢弃其余行。
代码实例：
package model
import (
	"fmt"
	"goworks/goweb/data/utils"
)

// User结构体
type User struct {
	ID       int
	Username string
	Password string
	Email    string
}

// AddUser 添加User的方法
func (user *User) AddUser() error {
	//写sql语句
	sqlStr := "insert into users(username,password,email) values(?,?,?)"
	//预编译
	inStmt, err := utils.Db.Prepare(sqlStr)
	if err != nil {
		fmt.Println("预编译出现异常")
		return err
	}
	//执行
	_, err = inStmt.Exec("admin", "123456", "740376998@qq.com")
	if err != nil {
		fmt.Println("执行出现异常", err)
		return err
	}
	return nil
}


DB结构体里面也有Exec、Query 和 QueryRow 方法，所以还可以通过调用DB里面的方法对数据库
进行操作
代码实例：
// AddUser2 添加User的方法
func (user *User) AddUser2() error {
	//写sql语句
	sqlStr := "insert into users(username,password,email) values(?,?,?)"
	//执行
	_, err := utils.Db.Exec(sqlStr,"admin2", "666666", "576868698@qq.com")
	if err != nil {
		fmt.Println("执行出现异常", err)
		return err
	}
	return nil
}

单元测试：
就是一种为验证单元的正确性而设置的自动化测
试，一个单元就是程序中的一个模块化部分。一般来说，一个单元通常会与程序中的一
个函数或者一个方法相对应，但这并不是必须的。Go 的单元测试需要用到 testing 包
以及 go test 命令，而且对测试文件也有以下要求

1.被测试的源文件和测试文件必须位于同一个包下
2. 测试文件必须要以_test.go 结尾
 虽然 Go 对测试文件_test.go 的前缀没有强制要求，不过一般我们都设置
为被测试的文件的文件名，如：要对 user.go 进行测试，那么测试文件的
名字我们通常设置为 user_test.go
3. 测试文件中的测试函数为 TestXxx(t *testing.T)
 其中 Xxx 的首字母必须是大写的英文字母
 函数参数必须是 test.T 的指针类型（如果是 Benchmark 测试则参数是
testing.B 的指针类型）
eg：向user_test.go 中测试添加员工的方法
代码示例：
package model

import (
	"fmt"
	"testing"
)

func TestAddUser(t *testing.T) {
	fmt.Println("添加测试用户：")
	user := &User{}
	user.AddUser()
	user.AddUser2()
}
//在终端输入go test

如果一个测试函数的函数名的不是以 Test 开头，那么在使用 go test 命令时默
认不会执行，不过我们可以设置该函数时一个子测试函数，可以在其他测试函
数里通过 t.Run 方法来执行子测试函数，具体代码如下

func TestUser(t *testing.T) {
t.Run("正在测试添加用户：", testAddUser)
t.Run("正在测试获取一个用户：", testGetUserById)
}
//子测试函数
func testAddUser(t *testing.T) {
fmt.Println("测试添加用户：")
user := &User{
Username: "admin5",
Password: "123456",
Email: "admin5@atguigu.com",
}
//将 user 添加到数据库中
user.AddUser()
}
//子测试函数
func testGetUserByID(t *testing.T) {
u := &User{}
user, _ := u.GetUserByID(1)
fmt.Println("用户的信息是：", *user)
}


我们还可以通过 TestMain(m *testing.M)函数在测试之前和之后做一些其他
的操作
a) 测试文件中有 TestMain 函数时，执行 go test 命令将直接运行 TestMain
函数，不直接运行测试函数，只有在 TestMain 函数中执行 m.Run()时才
会执行测试函数
b) 如果想查看测试的详细过程，可以使用 go test -v 命令
c) 具体代码
func TestMain(m *testing.M) {
fmt.Println("开始测试")
m.Run()
}
func TestUser(t *testing.T) {
t.Run("正在测试添加用户：", testAddUser)
}
func testAddUser(t *testing.T) {
fmt.Println("测试添加用户：")
user := &User{
Username: "admin5",
Password: "123456",
Email: "admin5@atguigu.com",
}
//将 user 添加到数据库中
user.AddUser()
}

获取一条记录
根据用户id从数据库中获取一条记录
代码实现：
func (user *User) GetUserByID() (*User, error) {
	//写sql语句
	sqlStr := "select id,username,password,email from users where id=?"
	//执行
	row := utils.Db.QueryRow(sqlStr, user.ID)
	//声明
	var id int
	var username string
	var password string
	var email string
	//将各个字段中的值读到以上三个变量中
	err := row.Scan(&id, &username, &password, &email)
	if err != nil {
		return nil, err
	}
	//将三个变量的值赋给User结构体
	u := &User{
		ID:       id,
		Username: username,
		Password: password,
		Email:    email,
	}
	return u, nil
}
type Row结构体
type Row struct {
    // 内含隐藏或非导出字段
}
QueryRow方法返回Row，代表单行查询结果。

func (*DB) QueryRow方法：
func (db *DB) QueryRow(query string, args ...interface{}) *Row
QueryRow执行一次查询，并期望返回最多一行结果（即Row）。QueryRow总是返回非nil的值，直到返回值的Scan方法被调用时，才会返回被延迟的错误。

func (*Row) Scan方法：
func (r *Row) Scan(dest ...interface{}) error
Scan将该行查询结果各列分别保存进dest参数指定的值中。如果该查询匹配多行，Scan会使用第一行结果并丢弃其余各行。如果没有匹配查询的行，Scan会返回ErrNoRows。


